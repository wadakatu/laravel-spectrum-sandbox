// Existing command outputs...
const commandOutputs = {
    generate: [
        { text: '$ php artisan spectrum:generate', class: 'command' },
        { text: '🚀 Generating API documentation...', class: 'info' },
        { text: '🔍 Analyzing routes...', class: 'info' },
        { text: '📝 Found 5 API routes', class: 'success' },
        { text: '🔄 Processing endpoints...', class: 'info' },
        { text: '  ✓ GET /api/v1/users', class: 'success' },
        { text: '  ✓ POST /api/v1/users', class: 'success' },
        { text: '  ✓ GET /api/v1/users/{user}', class: 'success' },
        { text: '  ✓ PUT /api/v1/users/{user}', class: 'success' },
        { text: '  ✓ DELETE /api/v1/users/{user}', class: 'success' },
        { text: '✅ Documentation generated successfully!', class: 'success' },
        { text: '📁 Output: storage/app/spectrum/openapi.json', class: 'info' },
        { text: '⏱️  Generation time: 0.52 seconds', class: 'info' }
    ],
    watch: [
        { text: '$ php artisan spectrum:watch', class: 'command' },
        { text: '🚀 Starting Laravel Spectrum preview server...', class: 'info' },
        { text: '📄 Generating initial documentation...', class: 'info' },
        { text: '✅ Documentation generated successfully!', class: 'success' },
        { text: '📡 Preview server running at http://127.0.0.1:8080', class: 'success' },
        { text: '👀 Watching for file changes...', class: 'info' },
        { text: 'Press Ctrl+C to stop', class: 'info' }
    ],
    mock: [
        { text: '$ php artisan spectrum:mock', class: 'command' },
        { text: '🚀 Starting Laravel Spectrum Mock Server...', class: 'info' },
        { text: '📄 Loading OpenAPI specification...', class: 'info' },
        { text: '✅ Loaded 5 endpoints', class: 'success' },
        { text: '', class: '' },
        { text: '🎭 Mock Server Configuration:', class: 'info' },
        { text: '  Host: 127.0.0.1', class: 'info' },
        { text: '  Port: 8081', class: 'info' },
        { text: '  Endpoints: 5', class: 'info' },
        { text: '  Response delay: 0ms', class: 'info' },
        { text: '', class: '' },
        { text: '✅ Mock server is running at http://127.0.0.1:8081', class: 'success' },
        { text: 'Press Ctrl+C to stop', class: 'info' }
    ]
};

// Terminal element
const terminal = document.getElementById('terminal');

// Add terminal line
function addTerminalLine(text, className = '') {
    const line = document.createElement('div');
    line.className = `terminal-line ${className}`;
    line.innerHTML = text;
    terminal.appendChild(line);
    terminal.scrollTop = terminal.scrollHeight;
}

// Simulate command execution
function executeCommand(command) {
    const outputs = commandOutputs[command] || [];
    
    // Clear previous output
    terminal.innerHTML = '';
    
    // Add outputs with delay for realistic effect
    outputs.forEach((output, index) => {
        setTimeout(() => {
            addTerminalLine(output.text, output.class);
            
            // Show documentation preview after generate command
            if (command === 'generate' && index === outputs.length - 1) {
                setTimeout(() => {
                    showDocumentationPreview();
                }, 500);
            }
        }, index * 100);
    });
}

// Show generated documentation preview
function showDocumentationPreview() {
    const docPreview = document.getElementById('documentation-preview');
    const openApiOutput = document.getElementById('openapi-output');
    
    // Sample OpenAPI output
    const sampleOpenApi = {
        "openapi": "3.0.0",
        "info": {
            "title": "Laravel API",
            "version": "1.0.0",
            "description": "API documentation generated by Laravel Spectrum"
        },
        "servers": [
            {
                "url": "http://localhost:8000",
                "description": "Local development server"
            }
        ],
        "paths": {
            "/api/v1/users": {
                "get": {
                    "summary": "Display a listing of users",
                    "parameters": [
                        {
                            "name": "search",
                            "in": "query",
                            "schema": { "type": "string" }
                        },
                        {
                            "name": "per_page",
                            "in": "query",
                            "schema": { "type": "integer", "default": 15 }
                        }
                    ],
                    "responses": {
                        "200": {
                            "description": "Successful response",
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "array",
                                                "items": { "$ref": "#/components/schemas/User" }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "post": {
                    "summary": "Store a newly created user",
                    "requestBody": {
                        "required": true,
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "required": ["name", "email", "password", "password_confirmation"],
                                    "properties": {
                                        "name": { "type": "string", "maxLength": 255 },
                                        "email": { "type": "string", "format": "email", "maxLength": 255 },
                                        "password": { "type": "string", "minLength": 8 },
                                        "password_confirmation": { "type": "string" },
                                        "role": { "type": "string", "enum": ["admin", "user", "moderator"] },
                                        "is_active": { "type": "boolean" }
                                    }
                                }
                            }
                        }
                    },
                    "responses": {
                        "201": {
                            "description": "User created successfully",
                            "content": {
                                "application/json": {
                                    "schema": { "$ref": "#/components/schemas/User" }
                                }
                            }
                        }
                    }
                }
            }
        },
        "components": {
            "schemas": {
                "User": {
                    "type": "object",
                    "properties": {
                        "id": { "type": "integer" },
                        "name": { "type": "string" },
                        "email": { "type": "string" },
                        "role": { "type": "string" },
                        "is_active": { "type": "boolean" },
                        "created_at": { "type": "string", "format": "date-time" },
                        "updated_at": { "type": "string", "format": "date-time" }
                    }
                }
            }
        }
    };
    
    openApiOutput.textContent = JSON.stringify(sampleOpenApi, null, 2);
    docPreview.style.display = 'block';
    
    // Scroll to preview
    docPreview.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
    // Command buttons
    document.querySelectorAll('.command-btn').forEach(button => {
        button.addEventListener('click', (e) => {
            const command = e.currentTarget.getAttribute('data-command');
            executeCommand(command);
        });
    });
    
    // Clear terminal button
    document.getElementById('clear-terminal').addEventListener('click', () => {
        terminal.innerHTML = '<div class="terminal-line">$ <span class="text-info">Ready to execute commands...</span></div>';
        document.getElementById('documentation-preview').style.display = 'none';
    });
});